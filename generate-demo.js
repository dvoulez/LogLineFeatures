// Gerador de Demo - LogLineBrowser O4+
// Cria script de demonstra√ß√£o executando 2 fluxos e 1 diagn√≥stico ops

const fs = require("fs")
const path = require("path")

class DemoGenerator {
  constructor() {
    this.demoDir = "demo"
    this.timestamp = new Date().toISOString().replace(/[:.]/g, "-")
  }

  generateDemoScript() {
    console.log("üé¨ Gerando script de demonstra√ß√£o...")

    if (!fs.existsSync(this.demoDir)) {
      fs.mkdirSync(this.demoDir, { recursive: true })
    }

    const demoScript = `#!/bin/bash
# LogLineBrowser O4+ - Demo Script
# Executa 2 fluxos e 1 diagn√≥stico ops para demonstra√ß√£o

echo "üé¨ LogLineBrowser O4+ - Demonstra√ß√£o"
echo "===================================="
echo ""

# Verificar se o runtime est√° dispon√≠vel
if [ ! -f "./bin/logline" ]; then
    echo "‚ùå CLI n√£o encontrado. Execute o script de instala√ß√£o primeiro."
    exit 1
fi

# Iniciar runtime em background
echo "üöÄ Iniciando runtime..."
cd runtime && cargo run &
RUNTIME_PID=$!
cd ..

# Aguardar runtime inicializar
sleep 5

echo ""
echo "üìã DEMO 1: Minicontrato Simples (Humano Comum)"
echo "=============================================="
echo "Executando resumo de p√°gina com an√°lise de ROI..."
./bin/logline flows run examples/humano_comum_minicontrato.logline --simulate
echo ""
echo "‚úÖ Demo 1 conclu√≠do - Minicontrato com ROI estimado"
echo ""

sleep 3

echo "üìã DEMO 2: Pipeline Cient√≠fico (AlphaFold)"
echo "=========================================="
echo "Executando predi√ß√£o de estrutura proteica..."
./bin/logline flows contract examples/cientifico_alphafold.logline
echo ""
echo "Aprovando contrato de alto custo..."
./bin/logline flows approve contract_alphafold_123
echo ""
echo "‚úÖ Demo 2 conclu√≠do - Pipeline cient√≠fico com aprova√ß√£o"
echo ""

sleep 3

echo "üìã DEMO 3: Diagn√≥stico Ops (P95 Lat√™ncia)"
echo "========================================="
echo "Executando diagn√≥stico de performance..."
./bin/logline ops query --service=payments --metric=response_time_p95
echo ""
echo "Coletando evid√™ncias..."
./bin/logline ops evidence logs --type=error
echo ""
echo "Gerando hip√≥tese..."
./bin/logline ops hypothesis "Deploy recente causou degrada√ß√£o de performance"
echo ""
echo "‚úÖ Demo 3 conclu√≠do - Diagn√≥stico com evid√™ncias"
echo ""

echo "üìä Visualizando timeline unificada..."
./bin/logline ops timeline --mode=all --limit=20
echo ""

echo "üéâ DEMONSTRA√á√ÉO COMPLETA!"
echo "========================"
echo ""
echo "Resumo dos demos executados:"
echo "1. ‚úÖ Minicontrato simples com ROI"
echo "2. ‚úÖ Pipeline cient√≠fico com aprova√ß√£o"
echo "3. ‚úÖ Diagn√≥stico ops com evid√™ncias"
echo ""
echo "üìã Timeline unificada mostra flows + ops integrados"
echo "üì¶ Bundles de auditoria dispon√≠veis para download"
echo ""

# Parar runtime
kill $RUNTIME_PID
echo "üõë Runtime parado"
`

    const scriptPath = path.join(this.demoDir, "run-demo.sh")
    fs.writeFileSync(scriptPath, demoScript)
    fs.chmodSync(scriptPath, 0o755)

    console.log(`‚úÖ Script de demo criado: ${scriptPath}`)
  }

  generateDemoDocumentation() {
    console.log("üìö Gerando documenta√ß√£o do demo...")

    const demoDoc = `# LogLineBrowser O4+ - Demonstra√ß√£o

## Vis√£o Geral

Esta demonstra√ß√£o executa 3 cen√°rios principais do LogLineBrowser O4+:

1. **Minicontrato Simples** (Humano Comum)
2. **Pipeline Cient√≠fico** (AlphaFold)
3. **Diagn√≥stico Ops** (P95 Lat√™ncia)

## Execu√ß√£o

\`\`\`bash
# Executar demo completo
./demo/run-demo.sh
\`\`\`

## Cen√°rios Demonstrados

### 1. Minicontrato Simples
- **Persona**: Humano Comum
- **Cen√°rio**: Resumo autom√°tico de artigo
- **Features**: ROI estimado, custo baixo, aprova√ß√£o autom√°tica
- **Dura√ß√£o**: ~15 segundos

### 2. Pipeline Cient√≠fico
- **Persona**: Cient√≠fico
- **Cen√°rio**: Predi√ß√£o de estrutura proteica AlphaFold
- **Features**: Contrato de alto custo, aprova√ß√£o manual, export PDB
- **Dura√ß√£o**: ~5 minutos (simulado)

### 3. Diagn√≥stico Ops
- **Persona**: Ops
- **Cen√°rio**: Investiga√ß√£o de lat√™ncia P95
- **Features**: Coleta de evid√™ncias, hip√≥teses, recomenda√ß√µes
- **Dura√ß√£o**: ~30 segundos

## Resultados Esperados

### Timeline Unificada
- Spans de flows e ops na mesma timeline
- Metadados completos (custo, PII, origem)
- Rastreabilidade end-to-end

### Minicontratos
- Preview antes da execu√ß√£o
- Aprova√ß√£o baseada em risco
- Auditoria completa

### Evid√™ncias
- Chain of custody
- Hashes de integridade
- Bundles download√°veis

## Comandos Demonstrados

### Flows
\`\`\`bash
logline flows run <arquivo.logline> --simulate
logline flows contract <arquivo.logline>
logline flows approve <contract_id>
\`\`\`

### Ops
\`\`\`bash
logline ops query --service=payments --metric=response_time_p95
logline ops evidence logs --type=error
logline ops hypothesis "Deploy recente causou degrada√ß√£o"
logline ops timeline --mode=all
\`\`\`

## Valida√ß√£o

O demo valida:
- ‚úÖ CLI dual (flows + ops)
- ‚úÖ Timeline unificada
- ‚úÖ Minicontratos funcionais
- ‚úÖ Coleta de evid√™ncias
- ‚úÖ Integra√ß√£o end-to-end

## Pr√≥ximos Passos

Ap√≥s o demo:
1. Explorar outros exemplos .logline
2. Configurar Modelfile no Ollama
3. Executar testes de cen√°rio completos
4. Integrar com sistemas reais
`

    const docPath = path.join(this.demoDir, "README.md")
    fs.writeFileSync(docPath, demoDoc)

    console.log(`‚úÖ Documenta√ß√£o do demo criada: ${docPath}`)
  }

  generateDemo() {
    this.generateDemoScript()
    this.generateDemoDocumentation()

    console.log("\nüé¨ DEMO GERADO!")
    console.log("üìÅ Arquivos criados:")
    console.log("  - demo/run-demo.sh (script execut√°vel)")
    console.log("  - demo/README.md (documenta√ß√£o)")
    console.log("")
    console.log("üöÄ Para executar: ./demo/run-demo.sh")
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const generator = new DemoGenerator()
  generator.generateDemo()
}

module.exports = DemoGenerator
