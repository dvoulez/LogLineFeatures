generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AuthorType {
  USER
  SYSTEM
  AI
  EXTERNAL
}

enum Priority {
  URGENT
  MEDIUM
  NEUTRAL
}

enum TaskKind {
  CONTRACT
  FOLLOWUP
  SALE
  RETURN
  IDEA
  DOCUMENT
}

enum ConversationKind {
  GENERAL
  WHATSAPP
  TOPIC
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  messages      Message[]
  contacts      Contact[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String           @id @default(cuid())
  title     String
  kind      ConversationKind @default(GENERAL)
  messages  Message[]
  ownerId   String
  owner     User             @relation(fields: [ownerId], references: [id])
  tags      String[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  authorType     AuthorType
  authorName     String?
  authorId       String?
  content        String       @db.Text
  timestamp      DateTime     @default(now())
  externalId     String?
}

model Task {
  id             String    @id @default(cuid())
  conversationId String?
  description    String
  priority       Priority  @default(NEUTRAL)
  kind           TaskKind
  suggestion     String?
  dueAt          DateTime?
  createdAt      DateTime  @default(now())
  resolvedAt     DateTime?
}

model Contact {
  id        String   @id @default(cuid())
  phone     String?  @unique
  name      String?
  status    String?
  notes     String?
  createdAt DateTime @default(now())
}

model Contract {
  id        String   @id @default(cuid())
  who       String
  did       String
  thisObj   String
  when      String
  witness   String?
  ifOk      String?
  ifDoubt   String?
  ifNot     String?
  status    String   @default("draft")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
